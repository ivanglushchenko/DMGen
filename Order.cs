//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DMGen
{
    public partial class Order: System.ComponentModel.INotifyPropertyChanged
    {
        #region Primitive Properties
    
        /// <summary>
        /// Gets/sets the state of this object.
        /// </summary>
    	public ObjectState State
    	{
    		get { return _state; }
    		private set
    		{
    			if (_state != value)
    			{
    				_state = value;
    				OnPropertyChanged("State");
    			}
    		}
    	}
    	private ObjectState _state;
    
        /// <summary>
        /// Gets/sets Id.
        /// </summary>
        public virtual int Id
        {
            get { return _id; }
            set
    		{
    			if (value != _id)
    			{
    				OnIdChanging(_id, value);
    				_id = value;
    				OnPropertyChanged("Id");
    				OnIdChanged();
    				MarkAsModified();
    			}
    		}
        }
    	private int _id;
    	partial void OnIdChanging(int oldValue, int newValue);
    	partial void OnIdChanged();
    
        /// <summary>
        /// Gets/sets Quantity.
        /// </summary>
        public virtual int Quantity
        {
            get { return _quantity; }
            set
    		{
    			if (value != _quantity)
    			{
    				OnQuantityChanging(_quantity, value);
    				_quantity = value;
    				OnPropertyChanged("Quantity");
    				OnQuantityChanged();
    				MarkAsModified();
    			}
    		}
        }
    	private int _quantity;
    	partial void OnQuantityChanging(int oldValue, int newValue);
    	partial void OnQuantityChanged();

        #endregion

        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                }
            }
        }
        private ICollection<Product> _products;

        #endregion

        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Orders.Contains(this))
                {
                    Customer.Orders.Add(this);
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    if (!item.Orders.Contains(this))
                    {
                        item.Orders.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (item.Orders.Contains(this))
                    {
                        item.Orders.Remove(this);
                    }
                }
            }
        }

        #endregion

    	#region Methods
    
        /// <summary>
        /// Accepts changes (if there are any) and sets the state of all objects to Unchanged.
        /// </summary>
    	public void AcceptChanges()
    	{
    		ChangeState(ObjectState.Unchanged, TraverseDirection.Down, new HashSet<object>());
    	}
    
        /// <summary>
        /// Marks this and associated objects as modified.
        /// </summary>
    	public void MarkAsModified()
    	{
    		ChangeState(ObjectState.Modified, TraverseDirection.Up, new HashSet<object>(new object[] { this }));
    	}
    
        /// <summary>
        /// Changes the state of all objects in the object graph.
        /// </summary>
    	internal void ChangeState(ObjectState desiredState, TraverseDirection direction, HashSet<object> visitedOjects)
    	{
    		switch (desiredState)
    		{
    			case ObjectState.Modified:
    				if (State == ObjectState.Unchanged)
    					State = ObjectState.Modified;
    				break;
    			case ObjectState.Deleted:
    				if (State == ObjectState.New)
    					State = ObjectState.DeletedNew;
    				else
    					State = ObjectState.Deleted;
    				break;
    			default:
    				State = desiredState;
    				break;
    		}
    		if (visitedOjects.Contains(this)) return;
    		visitedOjects.Add(this);
    
    		if ((direction == TraverseDirection.Up || direction == TraverseDirection.UpDown) && _customer != null)
    		{
    			_customer.ChangeState(desiredState, direction, visitedOjects);
    		}
    	}
    
    	#endregion Methods
    
    	#region INotifyPropertyChanged Members
    
    	[NonSerialized]
    	private System.ComponentModel.PropertyChangedEventHandler _PropertyChanged;
    		
    	public virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    	{
    		add { _PropertyChanged += value; }
    		remove { _PropertyChanged -= value; }
    	}
    
    	protected virtual void OnPropertyChanged(string propertyName)
    	{
    		if (_PropertyChanged != null)
    		{
    			_PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	#endregion
    }
}
