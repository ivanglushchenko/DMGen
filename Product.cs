//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DMGen
{
    public partial class Product: System.ComponentModel.INotifyPropertyChanged
    {
        #region Primitive Properties
    
        /// <summary>
        /// Gets/sets Id.
        /// </summary>
        public virtual int Id
        {
            get { return _id; }
            set
    		{
    			if (value != _id)
    			{
    				OnIdChanging(_id, value);
    				_id = value;
    				OnPropertyChanged("Id");
    				OnIdChanged();
    			}
    		}
        }
    	private int _id;
    	partial void OnIdChanging(int oldValue, int newValue);
    	partial void OnIdChanged();
    
        /// <summary>
        /// Gets/sets Name.
        /// </summary>
        public virtual string Name
        {
            get { return _name; }
            set
    		{
    			if (value != _name)
    			{
    				OnNameChanging(_name, value);
    				_name = value;
    				OnPropertyChanged("Name");
    				OnNameChanged();
    			}
    		}
        }
    	private string _name;
    	partial void OnNameChanging(string oldValue, string newValue);
    	partial void OnNameChanged();
    
        /// <summary>
        /// Gets/sets Description.
        /// </summary>
        public virtual string Description
        {
            get { return _description; }
            set
    		{
    			if (value != _description)
    			{
    				OnDescriptionChanging(_description, value);
    				_description = value;
    				OnPropertyChanged("Description");
    				OnDescriptionChanged();
    			}
    		}
        }
    	private string _description;
    	partial void OnDescriptionChanging(string oldValue, string newValue);
    	partial void OnDescriptionChanged();
    
        /// <summary>
        /// Gets/sets ProductGroupId.
        /// </summary>
        public virtual int ProductGroupId
        {
            get { return _productGroupId; }
            set
            {
                if (_productGroupId != value)
                {
                    if (ProductGroup != null && ProductGroup.Id != value)
                    {
                        ProductGroup = null;
                    }
                    _productGroupId = value;
                }
            }
        }
    	private int _productGroupId;
    	partial void OnProductGroupIdChanging(int oldValue, int newValue);
    	partial void OnProductGroupIdChanged();

        #endregion

        #region Complex Properties
    
        /// <summary>
        /// Gets/sets Type.
        /// </summary>
        public virtual ProductType Type
        {
            get { return _type; }
            set
    		{
    			if (value != _type)
    			{
    				OnTypeChanging(_type, value);
    				_type = value;
    				OnPropertyChanged("Type");
    				OnTypeChanged();
    			}
    		}
        }
        private ProductType _type = new ProductType();
    	partial void OnTypeChanging(ProductType oldValue, ProductType newValue);
    	partial void OnTypeChanged();

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;
    
        public virtual ProductGroup ProductGroup
        {
            get { return _productGroup; }
            set
            {
                if (!ReferenceEquals(_productGroup, value))
                {
                    var previousValue = _productGroup;
                    _productGroup = value;
                    FixupProductGroup(previousValue);
                }
            }
        }
        private ProductGroup _productGroup;

        #endregion

        #region Association Fixup
    
        private void FixupProductGroup(ProductGroup previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (ProductGroup != null)
            {
                if (!ProductGroup.Products.Contains(this))
                {
                    ProductGroup.Products.Add(this);
                }
                if (ProductGroupId != ProductGroup.Id)
                {
                    ProductGroupId = ProductGroup.Id;
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    if (!item.Products.Contains(this))
                    {
                        item.Products.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (item.Products.Contains(this))
                    {
                        item.Products.Remove(this);
                    }
                }
            }
        }

        #endregion

    	#region INotifyPropertyChanged Members
    
    	[NonSerialized]
    	private System.ComponentModel.PropertyChangedEventHandler _PropertyChanged;
    		
    	public virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    	{
    		add { _PropertyChanged += value; }
    		remove { _PropertyChanged -= value; }
    	}
    
    	protected virtual void OnPropertyChanged(string propertyName)
    	{
    		if (_PropertyChanged != null)
    		{
    			_PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	#endregion
    }
}
