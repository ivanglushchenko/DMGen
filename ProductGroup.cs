//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DMGen
{
    public partial class ProductGroup: System.ComponentModel.INotifyPropertyChanged
    {
        #region Primitive Properties
    
        /// <summary>
        /// Gets/sets the state of this object.
        /// </summary>
    	public ObjectState State
    	{
    		get { return _state; }
    		private set
    		{
    			if (_state != value)
    			{
    				_state = value;
    				OnPropertyChanged("State");
    			}
    		}
    	}
    	private ObjectState _state;
    
        /// <summary>
        /// Gets/sets Id.
        /// </summary>
        public virtual int Id
        {
            get { return _id; }
            set
    		{
    			if (value != _id)
    			{
    				OnIdChanging(_id, value);
    				_id = value;
    				OnPropertyChanged("Id");
    				OnIdChanged();
    			}
    		}
        }
    	private int _id;
    	partial void OnIdChanging(int oldValue, int newValue);
    	partial void OnIdChanged();
    
        /// <summary>
        /// Gets/sets ProductGroupId.
        /// </summary>
        public virtual int ProductGroupId
        {
            get { return _productGroupId; }
            set
            {
                if (_productGroupId != value)
                {
                    if (ParentGroup != null && ParentGroup.Id != value)
                    {
                        ParentGroup = null;
                    }
                    _productGroupId = value;
                }
            }
        }
    	private int _productGroupId;
    	partial void OnProductGroupIdChanging(int oldValue, int newValue);
    	partial void OnProductGroupIdChanged();

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                }
            }
        }
        private ICollection<Product> _products;
    
        public virtual ICollection<ProductGroup> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<ProductGroup>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<ProductGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<ProductGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<ProductGroup> _children;
    
        public virtual ProductGroup ParentGroup
        {
            get { return _parentGroup; }
            set
            {
                if (!ReferenceEquals(_parentGroup, value))
                {
                    var previousValue = _parentGroup;
                    _parentGroup = value;
                    FixupParentGroup(previousValue);
                }
            }
        }
        private ProductGroup _parentGroup;

        #endregion

        #region Association Fixup
    
        private void FixupParentGroup(ProductGroup previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (ParentGroup != null)
            {
                if (!ParentGroup.Children.Contains(this))
                {
                    ParentGroup.Children.Add(this);
                }
                if (ProductGroupId != ParentGroup.Id)
                {
                    ProductGroupId = ParentGroup.Id;
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.ProductGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductGroup, this))
                    {
                        item.ProductGroup = null;
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductGroup item in e.NewItems)
                {
                    item.ParentGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentGroup, this))
                    {
                        item.ParentGroup = null;
                    }
                }
            }
        }

        #endregion

    	#region Methods
    
        /// <summary>
        /// Accepts changes (if there are any) and sets the state of all objects to Unchanged.
        /// </summary>
    	public void AcceptChanges()
    	{
    		AcceptChanges(new HashSet<object>());
    	}
    
        /// <summary>
        /// Accepts changes (if there are any) and sets the state of all objects to Unchanged.
        /// </summary>
    	internal void AcceptChanges(HashSet<object> visitedOjects)
    	{
    		if (visitedOjects.Contains(this)) return;
    		visitedOjects.Add(this);
    		State = ObjectState.Unchanged;
    		if (_products != null)
    		{
    			foreach (var item in _products)
    				item.AcceptChanges(visitedOjects);
    		}
    		if (_children != null)
    		{
    			foreach (var item in _children)
    				item.AcceptChanges(visitedOjects);
    		}
    		if (_parentGroup != null)
    		{
    			_parentGroup.AcceptChanges(visitedOjects);
    		}
    	}
    
    	#endregion Methods
    
    	#region INotifyPropertyChanged Members
    
    	[NonSerialized]
    	private System.ComponentModel.PropertyChangedEventHandler _PropertyChanged;
    		
    	public virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    	{
    		add { _PropertyChanged += value; }
    		remove { _PropertyChanged -= value; }
    	}
    
    	protected virtual void OnPropertyChanged(string propertyName)
    	{
    		if (_PropertyChanged != null)
    		{
    			_PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	#endregion
    }
}
