//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DMGen
{
    public partial class Customer: System.ComponentModel.INotifyPropertyChanged
    {
        #region Primitive Properties
    
        /// <summary>
        /// Gets/sets Id.
        /// </summary>
        public virtual int Id
        {
            get { return _id; }
            set
    		{
    			if (value != _id)
    			{
    				OnIdChanging(_id, value);
    				_id = value;
    				OnPropertyChanged("Id");
    				OnIdChanged();
    			}
    		}
        }
    	private int _id;
    	partial void OnIdChanging(int oldValue, int newValue);
    	partial void OnIdChanged();
    
        /// <summary>
        /// Gets/sets FirstName.
        /// </summary>
        public virtual string FirstName
        {
            get { return _firstName; }
            set
    		{
    			if (value != _firstName)
    			{
    				OnFirstNameChanging(_firstName, value);
    				_firstName = value;
    				OnPropertyChanged("FirstName");
    				OnFirstNameChanged();
    			}
    		}
        }
    	private string _firstName;
    	partial void OnFirstNameChanging(string oldValue, string newValue);
    	partial void OnFirstNameChanged();
    
        /// <summary>
        /// Gets/sets LastName.
        /// </summary>
        public virtual string LastName
        {
            get { return _lastName; }
            set
    		{
    			if (value != _lastName)
    			{
    				OnLastNameChanging(_lastName, value);
    				_lastName = value;
    				OnPropertyChanged("LastName");
    				OnLastNameChanged();
    			}
    		}
        }
    	private string _lastName;
    	partial void OnLastNameChanging(string oldValue, string newValue);
    	partial void OnLastNameChanged();

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;

        #endregion

        #region Association Fixup
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion

    	#region INotifyPropertyChanged Members
    
    	[NonSerialized]
    	private System.ComponentModel.PropertyChangedEventHandler _PropertyChanged;
    		
    	public virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    	{
    		add { _PropertyChanged += value; }
    		remove { _PropertyChanged -= value; }
    	}
    
    	protected virtual void OnPropertyChanged(string propertyName)
    	{
    		if (_PropertyChanged != null)
    		{
    			_PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	#endregion
    }
}
